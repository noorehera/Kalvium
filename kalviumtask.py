# -*- coding: utf-8 -*-
"""KalviumTask.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CGlZoXPdE8kqSSEw8hhvilzXGfAXV_ZO
"""

import requests
from bs4 import BeautifulSoup
import pandas as pd
from google.colab import files

results_url = "https://results.eci.gov.in/PcResultGenJune2024/index.htm"

def fetch_election_results(url):
    """
    Fetches and parses the election results from the provided URL.
    Returns the HTML table containing the results.
    """
    response = requests.get(url)
    if response.status_code == 200:
        print("Results page accessed successfully")
        soup = BeautifulSoup(response.text, 'html.parser')
        tables = soup.find_all('table')
        if len(tables) > 0:
            return tables[0]
        else:
            raise ValueError("No tables found on the results page.")
    else:
        raise ValueError(f"Failed to access the results page. Status code: {response.status_code}")

def process_election_data(table):
    """
    Processes the HTML table data into a pandas DataFrame.
    Cleans and converts data types as necessary.
    """
    rows = table.find_all('tr')
    data = []
    for row in rows:
        cols = row.find_all('td')
        cols = [ele.text.strip() for ele in cols]
        if len(cols) > 0:
            data.append(cols)
    columns = ['Constituency', 'Candidate', 'Party', 'Votes']
    if not data:
        raise ValueError("No data found in the table.")
    df = pd.DataFrame(data, columns=columns)
    df['Votes'] = pd.to_numeric(df['Votes'], errors='coerce')
    df.dropna(subset=['Votes'], inplace=True)
    df['Votes'] = df['Votes'].astype(int)
    return df

def generate_election_insights(df):
    """
    Generates insights from the processed election data DataFrame.
    Returns a list of insights formatted as strings.
    """
    insights = []

    if df.empty:
        raise ValueError("No valid data to analyze.")
    ''' 1. Total number of parties
        2. Total number of constituencies
        3. Leading party
        4. Party with the second major votes
        5. Top 5 parties by seats
        6. Parties that could form a coalition (based on top party)
        7. Total number of minor parties with 1 seat or less, excluding IND'''
    total_parties = df['Party'].nunique()
    insights.append(f"Total number of parties: {total_parties}")

    total_constituencies = df['Constituency'].nunique()
    insights.append(f"Total number of constituencies: {total_constituencies}")

    leading_party = df['Party'].value_counts().idxmax()
    insights.append(f"Leading party: {leading_party}")

    second_major_party = df.groupby('Party')['Votes'].sum().nlargest(2).iloc[-1]
    insights.append(f"Party with the second major votes: {second_major_party}")

    top_5_parties = df['Party'].value_counts().nlargest(5)
    insights.append("Top 5 parties by seats:")
    for idx, (party, seats) in enumerate(top_5_parties.items(), start=1):
        insights.append(f"   {party}: {seats} seats")

    coalition_parties = list(top_5_parties.index[:2])
    insights.append(f"Parties that could form a coalition: {', '.join(coalition_parties)}")

    minor_parties = df[df['Won'] <= 1]
    total_minor_parties = len(minor_parties)
    insights.append(f"Total number of minor parties with 1 seat or less (excluding IND): {total_minor_parties} seats")

    return insights

try:
    results_table = fetch_election_results(results_url)
    df = process_election_data(results_table)
    insights = generate_election_insights(df)
    df.to_csv('raw_election_data.csv', index=False)
    with open('election_insights_2024.txt', 'w') as file:
        file.write("Top 10 Insights:\n")
        for idx, insight in enumerate(insights, start=1):
            file.write(f"{idx}. {insight}\n")

    files.download('raw_election_data.csv')
    files.download('election_insights_2024.txt')

except Exception as e:
    print(f"")